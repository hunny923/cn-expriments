#include <stdio.h>

#define FLAG 0x7E
#define ESC  0x7D

int main() {
    unsigned char data[] = {0x45, 0x7D, 0x21, 0x7E, 0x33};
    int i, j = 0, k = 0;
    unsigned char stuffed[100], unstuffed[100];

    // Stuffing
    stuffed[j++] = FLAG;
    for (i = 0; i < 5; i++) {
        if (data[i] == FLAG || data[i] == ESC)
            stuffed[j++] = ESC;
        stuffed[j++] = data[i];
    }
    stuffed[j++] = FLAG;

    // Unstuffing
    for (i = 1; i < j - 1; i++) {
        if (stuffed[i] == ESC)
            i++; // Skip ESC
        unstuffed[k++] = stuffed[i];
    }

    // Output
    printf("Original  : ");
    for (i = 0; i < 5; i++) printf("0x%X ", data[i]);

    printf("\nStuffed   : ");
    for (i = 0; i < j; i++) printf("0x%X ", stuffed[i]);

    printf("\nUnstuffed : ");
    for (i = 0; i < k; i++) printf("0x%X ", unstuffed[i]);

    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------
optional code 
#include <stdio.h>
#include <string.h>

#define MAX_WORDS 100
#define MAX_LEN 20

int main() {
    char data[1000];
    char dlist[MAX_WORDS][MAX_LEN];
    int count = 0;

    printf("Enter data:\n");
    fgets(data, sizeof(data), stdin);

    // Remove trailing newline
    size_t len = strlen(data);
    if (len > 0 && data[len - 1] == '\n') {
        data[len - 1] = '\0';
    }

    // Split input into words
    char *token = strtok(data, " ");
    while (token != NULL && count < MAX_WORDS) {
        strcpy(dlist[count], token);
        count++;
        token = strtok(NULL, " ");
    }

    // Perform byte stuffing
    char stuffed[MAX_WORDS * 2][MAX_LEN];  // double size in case all need stuffing
    int stuffed_count = 0;

    for (int i = 0; i < count; i++) {
        if (strcmp(dlist[i], "flag") == 0 || strcmp(dlist[i], "esc") == 0) {
            strcpy(stuffed[stuffed_count++], "esc");
        }
        strcpy(stuffed[stuffed_count++], dlist[i]);
    }

    // Print stuffed data
    printf("Stuffed data:\n");
    for (int i = 0; i < stuffed_count; i++) {
        printf("%s ", stuffed[i]);
    }
    printf("\n");

    return 0;
}
